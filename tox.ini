[tox]
envlist = py{310,311,312}, bandit, ruff_reformat, ruff_check #, mypy, ruff_checkformat, prospector
isolated_build = true
skip_missing_interpreters = true

[testenv]; This is called py{310,311,312} in envlist
description = Run pytest, coverage.
deps =
    coverage
    pytest
commands =
    coverage run --source=bris -m pytest
    coverage report --omit='.tox/*'
parallel_show_output = true

[testenv:prospector]
description = "Run static analysis using prospector, don't fail on errors"
ignore_outcome = true
deps = prospector
commands = prospector --no-autodetect \
            --test-warnings \
            --die-on-tool-error \
            {toxinidir}/bris

[testenv:ruff_checkformat]
description = "Run ruff format and complain on changes"
deps = ruff
skip_install = true
commands = ruff format --config pyproject.toml --check --diff
parallel_show_output = true

[testenv:ruff_reformat]
description = "Reformat code with ruff format, a Python formatter like black."
deps = ruff
skip_install = true
commands = ruff format --config pyproject.toml

[testenv:ruff_check]
description = "Run ruff check, a Python linter. Auto-fix only isort, see pyproject.toml."
deps = ruff
skip_install = true
commands = ruff check --config pyproject.toml --fix --exit-non-zero-on-fix

[testenv:mypy]
description = "Check typing with mypy. Only warn, don't fail on errors."
ignore_outcome = true
deps =
    mypy
    types-PyYAML
skip_install = true
commands = mypy --config-file pyproject.toml bris

[testenv:bandit]
description = "Check for security issues. Ignoring asserts for now."
deps =
    bandit[toml]
skip_install = true
commands = bandit --recursive -c pyproject.toml bris

[testenv:train]
description = "Run a test training on synthetic data. Will download 80 MB from github. Slow! Will take about 5 minutes. Result end up in .tox/train/tmp/training-output"
deps =
    anemoi-training==0.3.3
    anemoi-graphs==0.4.4
skip_install = true
set_env = ANEMOI_BASE_SEED=1234
change_dir = {envtmpdir}
allowlist_externals =
    cp
    wget
    unzip
    mv
commands_pre =
    # Copy config file to the temp directory.
    cp -vf {toxinidir}/config/tox_test_train.yaml {envtmpdir}/
    # Copy already downloaded data to the temp directory, if they exist.
    - cp ../main.zip {envtmpdir}/
    # Download the data from github, if needed.
    wget --no-clobber https://github.com/metno/bris-test-data/archive/refs/heads/main.zip
    # Store downloaded data, so we don't have to download it again next run.
    cp -af {envtmpdir}/main.zip ../
    # Unpack and move data to correct location.
    unzip {envtmpdir}/main.zip -d {envtmpdir}/
    mv -fv {envtmpdir}/bris-test-data-main/bris_random_data.zarr {envtmpdir}/
commands = anemoi-training train --config-name tox_test_train

[testenv:inference]
description = "Run a test inference. Requires 'tox -e train' to have run successfully. Result end up in .tox/inference/tmp/. No usable data is generated."
depends = train
change_dir = {envtmpdir}
allowlist_externals =
    cp
    ln
    find
commands_pre =
    # Copy config file to temp directory.
    cp -vf {toxinidir}/config/tox_test_inference.yaml {envtmpdir}/
    # Find and copy checkpont to temp directory. There may be more than one, but we don't care.
    find {envtmpdir}/../../train/tmp/training-output/checkpoint -name inference-last.ckpt -exec cp -vf '{}' {envtmpdir}/ \;
    # Link data from other tox environment.
    ln -sf {envtmpdir}/../../train/tmp/training-output {envtmpdir}/
    pip install anemoi-models==0.4.2 # Override anemoi-models to match train environment
commands = bris --config tox_test_inference.yaml
